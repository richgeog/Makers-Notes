GIT AND GITHUB NOTES

"COMMIT EARLY, COMMIT OFTEN"

respository = is a directory with files that are placed under version control. '.git init' opens a hidden file '.git' that tracks the changes to the files within the directory

git init = iniatialises a git repository. This only has to be done once for each repository
DO NOT git init ON A TOP LEVEL DIRECTORY EG DESKTOP OR HOME DIRECTORY. RUN 'git.init' INSIDE THE DIRECTORY WHERE THE FILES FOR THE PROJECT YOU'RE PLACING UNDER VERSION CONTROL ARE
It is good practice when starting a new project to create a new directory where all thr project files will be kept, then change into the directory and place it under version control(VC) by running 'git init'

rm -rf .git = reverts the initialised called and it will remove the hidden .git folder
git add FILE_NAME = adds the file to the staging area
git add . = adds all files from that current directory downwards to the staging area. Worth checking 'git status' first to understand what will be added first before making this add
git commit -m "comment" = Commits all staged files to the repo (Ths "comment" section is where you add a comment regarding what the commit is about to help understand what changes/updates where applied to the branch at that time) "first commit" should be used as the comment for all first commits.
git status = gives you a view of what files have been changed since the last commit
  Nothhing to commit = this means there has been nothing add to the staging area
  Working directory clean = No changes have been made so no new commits can be made
git checkout FILE_NAME = takes you back to the previously commited working point
git reset HEAD FILE_NAME = unstages the file added from the staging area
git log = lists the history about all previous commits
  git log ways to display the log differently

  git log --pretty=oneline

  git log --pretty=oneline --max-count=2
  git log --pretty=oneline --since='5 minutes ago'
  git log --pretty=oneline --until='5 minutes ago'
  git log --pretty=oneline --author=<your name>
  git log --pretty=oneline --all

  git log --all --pretty=format:'%h %cd %s (%an)' --since='7 days ago'

  git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short

What the above coding means

  --pretty="..." defines the format of the output.
  %h is the abbreviated hash of the commit
  %d are any decorations on that commit (e.g. branch heads or tags)
  %ad is the author date
  %s is the comment
  %an is the author name
  --graph informs git to display the commit tree in an ASCII graph layout
  --date=short keeps the date format nice and short

git rm FILE_NAME = removes file from the repo
git checkout "hash code" = takes you back to that period of work or commit time. To get the hash code use 'git log' There will be some long alpha/numerical data displayed for each commit, use the first 7 characters as the 'hash code'
git checkout master = takes you back to the main branch, known as the master branch
git remote -v = gives you the current list of remotes for your local git repository
git push v- origin master = push code from the local repo to the repo with the remote repo called origin
git push = is a short hand for the above and pushes all chages/commits back to the main repo, i.e Github
git pull = update your repo with any changes from the main repo that other people have submitted
git fetch = pulls all updates from the original repo but these do not get integrated into the cloned repos local branches
git clone "cmd V" = this allows yu to clone a repo from Github and add it locally to your system. By doing this it allows you to work offline and then when you have an internet connection push your changes back.
  How to clone = To get the clone address, go to the users Github page, select the repo you want to clone, to where it says clone and click on the clipboard icon, this can then be pasted into the command line
vi git.config = (MAKE SURE YOU ARE IN THE HOME DIRECTORY BEFORE USING THIS COMMAND) Create aliases for commands like below for example

[alias]
  co = checkout
  ci = commit
  st = status
  br = branch
  hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
  type = cat-file -t
  dump = cat-file -p

git checkout 'hash code' = ??????
git checkout master = returns you to the master branch
git tag = allows you to tag files with names or version numbers for easy refernace
git checkout 'tag_name'^ = this will take you to the parent of the tag you inputted?????
git checkout 'tag_name' = this allows you to change between the tag names/versions you gave the file
git tag = list all the tags
git hist master --all = list all tags in logs
HEAD = Tells you what branch you are currently checked out too or on



UNDOING LOCAL CHANGES(BEFORE STAGING)

git checkout master = takes you to the latest commit master
-make the ammendments you need
git status = files will be modified but not staged
git checkout FILE_NAME = this will revert the file back to the previous before any changes were made
git status = check this no longer says the files have been modified



UNDOING STAGED CHANGES(BEFORE COMMITTING)

-ammend the file you want to
git status = check its been modified byt not added yet
git add FILE_NAME = will add the file to the staging area
git reset HEAD FILE_NAME = removes the fiel from the staging area.(This will not return the file to the previous version, to do that complete the following step)
git checkout FILE_NAME
got status



UNDOING COMMITS FROM A BRANCH

git hist = to see what the log says
git tag 'tag_name' FILE_NAME
git reset --hard'tag_name' = This removes both the options??????
git hist = to check the commit has been removed from the log



REMOVING TAGS

git tag -d 'tag_name'
git hist --all



AMMENDING COMMITS

git add FILE_NAME
git commit amend-- -m "comment"
git hist = check the ammend has taken place



MOVING FILES IN GIT

git mv FILE_NAME MOVED_FILE_NAME
git status = check the move has taken place
git commit -m "comment"



GIT INTERNALS

got to the root directory
ls -C .git = this displays all the git directories available



CREATING A NEW BRANCH

git checkout -b 'branch_name'



CHANGING INTO BRANCHES

git checkout 'branch_name'



MERGE CONFLICTS

When you go to merge branches with the master branch, there could be conflicts between the files. These will be highlighted once you attempt to merge.
Go to the location it tells you where the conflict is. Acces the file using VIM, review the conflict and ammend and save. The errors will be higlighted with HEAD <<<<<<< and the other conflict will have =======
git add FILE_NAME = once conflict is fixed
git commit -m "comment"


RESETTING A BRANCH

git reset --hard'hash value'



REBASING

git checkout 'branch_name'
git rebase master
git hist

On cloned repos's you need to enter git 'branch -a' to view all the branches as 'git branch' will only show the master branch



MERGING PULLED CHANGES

get merge /origin/master = this will update your repo of all changes



TRACKING BRANCHES

git branch --track 'branch_name' origin/'branch_name'
git branch -a
git hist --max-count=2



BARE REPOSITORIES(WITHOUT A WORKING DIRECTORY)

git clone --bare 'file_name' 'new_file_name.git'
ls 'new_file_name.git'
-convention is that files ending .git are bare repos



ADDING A REMOTE REPO

cd 'file_name'
git remote add shared ../'file_name.git'



PUSHING A CHANGE TO A REMOTE REPO

git checkout master
git add 'file_name'
git commit -m "comment"
git oush shared master



PUSHING SHARED CHANGES

cd ../cloned.filename
git remote add shared ../'file_name.git'
git barnch --track shared master
git pull shared master
cat 'file_name'